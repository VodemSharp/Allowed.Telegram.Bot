// <auto-generated />
using System;
using Allowed.Telegram.Bot.Sample.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Allowed.Telegram.Bot.Sample.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("Id")
                        .HasName("pk_telegram_bots");

                    b.ToTable("telegram_bots", (string)null);
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUser", b =>
                {
                    b.Property<long>("TelegramBotId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_bot_id");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.Property<bool?>("AddedToAttachmentMenu")
                        .HasColumnType("boolean")
                        .HasColumnName("added_to_attachment_menu");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("TelegramBotId", "TelegramUserId")
                        .HasName("pk_telegram_bot_users");

                    b.HasIndex("TelegramUserId")
                        .HasDatabaseName("ix_telegram_bot_users_telegram_user_id");

                    b.ToTable("telegram_bot_users", (string)null);
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUserRole", b =>
                {
                    b.Property<long>("TelegramBotId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_bot_id");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.Property<int>("TelegramRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("telegram_role_id");

                    b.HasKey("TelegramBotId", "TelegramUserId", "TelegramRoleId")
                        .HasName("pk_telegram_bot_user_roles");

                    b.HasIndex("TelegramRoleId")
                        .HasDatabaseName("ix_telegram_bot_user_roles_telegram_role_id");

                    b.ToTable("telegram_bot_user_roles", (string)null);
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_telegram_roles");

                    b.HasAlternateKey("Name")
                        .HasName("ak_telegram_roles_name");

                    b.ToTable("telegram_roles", (string)null);
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text")
                        .HasColumnName("language_code");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_telegram_users");

                    b.HasIndex("Username")
                        .HasDatabaseName("ix_telegram_users_username");

                    b.ToTable("telegram_users", (string)null);
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("TelegramBotId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_bot_id");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_user_files");

                    b.HasIndex("TelegramBotId", "TelegramUserId")
                        .HasDatabaseName("ix_user_files_telegram_bot_id_telegram_user_id");

                    b.ToTable("user_files", (string)null);
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUser", b =>
                {
                    b.HasOne("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBot", null)
                        .WithMany()
                        .HasForeignKey("TelegramBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_bot_users_telegram_bots_telegram_bot_id");

                    b.HasOne("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgUser", null)
                        .WithMany()
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_bot_users_telegram_users_telegram_user_id");
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUserRole", b =>
                {
                    b.HasOne("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgRole", null)
                        .WithMany()
                        .HasForeignKey("TelegramRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_bot_user_roles_telegram_roles_telegram_role_id");

                    b.HasOne("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUser", null)
                        .WithMany()
                        .HasForeignKey("TelegramBotId", "TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telegram_bot_user_roles_telegram_bot_users_telegram_bot_id_");
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.UserFile", b =>
                {
                    b.HasOne("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUser", "TelegramBotUser")
                        .WithMany("UserFiles")
                        .HasForeignKey("TelegramBotId", "TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_files_telegram_bot_users_telegram_bot_id_telegram_user");

                    b.Navigation("TelegramBotUser");
                });

            modelBuilder.Entity("Allowed.Telegram.Bot.Sample.DbModels.Allowed.ApplicationTgBotUser", b =>
                {
                    b.Navigation("UserFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
